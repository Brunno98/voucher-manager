// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/brunno98/voucher-manager/domain/code (interfaces: RecoverService)

// Package mock_code is a generated GoMock package.
package code

import (
        reflect "reflect"
        time "time"

        gomock "github.com/golang/mock/gomock"
)

// MockRecoverService is a mock of RecoverService interface.
type MockRecoverService struct {
        ctrl     *gomock.Controller
        recorder *MockRecoverServiceMockRecorder
}

// MockRecoverServiceMockRecorder is the mock recorder for MockRecoverService.
type MockRecoverServiceMockRecorder struct {
        mock *MockRecoverService
}

// NewMockRecoverService creates a new mock instance.
func NewMockRecoverService(ctrl *gomock.Controller) *MockRecoverService {
        mock := &MockRecoverService{ctrl: ctrl}
        mock.recorder = &MockRecoverServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecoverService) EXPECT() *MockRecoverServiceMockRecorder {
        return m.recorder
}

// GetEarliestRecoveryDateNotUsed mocks base method.
func (m *MockRecoverService) GetEarliestRecoveryDateNotUsed(arg0 string, arg1 []time.Time) (time.Time, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetEarliestRecoveryDateNotUsed", arg0, arg1)
        ret0, _ := ret[0].(time.Time)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetEarliestRecoveryDateNotUsed indicates an expected call of GetEarliestRecoveryDateNotUsed.
func (mr *MockRecoverServiceMockRecorder) GetEarliestRecoveryDateNotUsed(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarliestRecoveryDateNotUsed", reflect.TypeOf((*MockRecoverService)(nil).GetEarliestRecoveryDateNotUsed), arg0, arg1)
}

// RemoveDatesAlreadyRecovered mocks base method.
func (m *MockRecoverService) RemoveDatesAlreadyRecovered(arg0 string, arg1 []time.Time) []time.Time {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "RemoveDatesAlreadyRecovered", arg0, arg1)
        ret0, _ := ret[0].([]time.Time)
        return ret0
}

// RemoveDatesAlreadyRecovered indicates an expected call of RemoveDatesAlreadyRecovered.
func (mr *MockRecoverServiceMockRecorder) RemoveDatesAlreadyRecovered(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDatesAlreadyRecovered", reflect.TypeOf((*MockRecoverService)(nil).RemoveDatesAlreadyRecovered), arg0, arg1)
}