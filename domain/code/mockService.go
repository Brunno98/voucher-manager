// Code generated by MockGen. DO NOT EDIT.
// Source: .\domain\code\service.go

// Package mock_code is a generated GoMock package.
package code

import (
        reflect "reflect"
        time "time"

        gomock "github.com/golang/mock/gomock"
)

// MockRecoverService is a mock of RecoverService interface.
type MockRecoverService struct {
        ctrl     *gomock.Controller
        recorder *MockRecoverServiceMockRecorder
}

// MockRecoverServiceMockRecorder is the mock recorder for MockRecoverService.
type MockRecoverServiceMockRecorder struct {
        mock *MockRecoverService
}

// NewMockRecoverService creates a new mock instance.
func NewMockRecoverService(ctrl *gomock.Controller) *MockRecoverService {
        mock := &MockRecoverService{ctrl: ctrl}
        mock.recorder = &MockRecoverServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecoverService) EXPECT() *MockRecoverServiceMockRecorder {
        return m.recorder
}

// FilterRecoveryAlreadyUsed mocks base method.
func (m *MockRecoverService) FilterRecoveryAlreadyUsed(dates []time.Time) []time.Time {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FilterRecoveryAlreadyUsed", dates)
        ret0, _ := ret[0].([]time.Time)
        return ret0
}

// FilterRecoveryAlreadyUsed indicates an expected call of FilterRecoveryAlreadyUsed.
func (mr *MockRecoverServiceMockRecorder) FilterRecoveryAlreadyUsed(dates interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRecoveryAlreadyUsed", reflect.TypeOf((*MockRecoverService)(nil).FilterRecoveryAlreadyUsed), dates)
}

// GetEarliestRecoveryDateNotUsed mocks base method.
func (m *MockRecoverService) GetEarliestRecoveryDateNotUsed(subscriptionId string, availableDates []time.Time) (time.Time, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetEarliestRecoveryDateNotUsed", subscriptionId, availableDates)
        ret0, _ := ret[0].(time.Time)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetEarliestRecoveryDateNotUsed indicates an expected call of GetEarliestRecoveryDateNotUsed.
func (mr *MockRecoverServiceMockRecorder) GetEarliestRecoveryDateNotUsed(subscriptionId, availableDates interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarliestRecoveryDateNotUsed", reflect.TypeOf((*MockRecoverService)(nil).GetEarliestRecoveryDateNotUsed), subscriptionId, availableDates)
}