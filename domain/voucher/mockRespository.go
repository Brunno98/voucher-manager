// Code generated by MockGen. DO NOT EDIT.
// Source: .\domain\voucher\repository.go

// Package voucher is a generated GoMock package.
package voucher

import (
	reflect "reflect"
	time "time"

	code "github.com/brunno98/voucher-manager/domain/code"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockRepository) FindAll() []Voucher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]Voucher)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll))
}

// FindByKey mocks base method.
func (m *MockRepository) FindByKey(key string) (Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", key)
	ret0, _ := ret[0].(Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockRepositoryMockRecorder) FindByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockRepository)(nil).FindByKey), key)
}

// Recover mocks base method.
func (m *MockRepository) Recover(subscriptionId string, referenceDate time.Time, voucher *Voucher) (code.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", subscriptionId, referenceDate, voucher)
	ret0, _ := ret[0].(code.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recover indicates an expected call of Recover.
func (mr *MockRepositoryMockRecorder) Recover(subscriptionId, referenceDate, voucher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockRepository)(nil).Recover), subscriptionId, referenceDate, voucher)
}
